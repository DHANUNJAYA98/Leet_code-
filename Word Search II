# Word Search II
-Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.
#solution
class Solution {
    class TrieNode{
          TrieNode[]child=new TrieNode[26];
        String word;
    }
    public TrieNode buildTrie(String[] words){
        TrieNode root=new TrieNode();
        for(String w:words){
            TrieNode current=root;
            for(char c:w.toCharArray()){
                int i=c-'a';
                if(current.child[i]==null){
                    current.child[i]=new TrieNode();
                }
                current=current.child[i];
            }
            current.word=w;
        }
        return root;
    }
    public List<String> findWords(char[][] board, String[] words) {
      List<String>res=new ArrayList<>();
      TrieNode root= buildTrie(words);
      for(int i=0;i<board.length;i++){
          for(int j=0;j<board[0].length;j++){
              dfs(board,i,j,root,res);
          }
      }
      return res;
    }
    private void dfs(char[][] board,int i,int j,TrieNode root,List<String>res){
      char c=board[i][j];
      if(c=='*'||root.child[c-'a']==null){
          return;
      } 
      root=root.child[c-'a'];
      if(root.word!=null){
          res.add(root.word);
          root.word=null;
      }
      board[i][j]='*';
      if(i>0){
          dfs(board,i-1,j,root,res);

      }
      if(j>0){
          dfs(board,i,j-1,root,res);
      }
      if(i<board.length-1){
          dfs(board,i+1,j,root,res);
      }
      if(j<board[0].length-1){
          dfs(board,i,j+1,root,res);
      }
      board[i][j]=c;
    }
}
