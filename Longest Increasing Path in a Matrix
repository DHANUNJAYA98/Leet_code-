-Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).
class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int m=matrix.length;
        int n=matrix[0].length;
        int dp[][]=new int[m][n];
        int lp=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                lp=Math.max(lp,dfs(matrix,dp,i,j,-1));
            }
        }
        return lp;
    }
    public static int dfs(int matrix[][],int dp[][],int r,int c,int prev){
        if(r<0 ||r>=matrix.length ||c<0 || c>=matrix[0].length || matrix[r][c]<=prev){
            return 0;
        }
        if(dp[r][c]!=0){
            return dp[r][c];
        }
        int max=1;
        max=Math.max(max,1+dfs(matrix,dp,r+1,c,matrix[r][c]));
        max=Math.max(max,1+dfs(matrix,dp,r-1,c,matrix[r][c]));
         max=Math.max(max,1+dfs(matrix,dp,r,c+1,matrix[r][c]));
          max=Math.max(max,1+dfs(matrix,dp,r,c-1,matrix[r][c]));
          dp[r][c]=max;
          return max;   
    }
}
